{"google":"","tagline":"Ruby bindings for the VMware VIX API","name":"Vixen","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Getting Vixen\r\n=============\r\n\r\n```shell\r\n$ gem install vixen\r\n```\r\n\r\nRunning Vixen\r\n=============\r\n\r\nCurrently, the `vixen` executable only lists the currently running virtual\r\nmachines. Much work on the executable remains.\r\n\r\n```shell\r\n[~]$ vixen\r\n[00:00:00] Connecting to local host\r\n[00:00:00] centos-5.8-pe-2.5.3-vmware.vmx\r\n[00:00:01] CentOS 5.6 64-bit.vmx\r\n[00:00:01] Found 2 running virtual machines\r\n```\r\n\r\nLibrary Usage\r\n=============\r\n\r\nCapabilities\r\n------------\r\n\r\n * View running VMs\r\n * Control power state (on, off, suspend, reset) of VMs\r\n * Viewing the current snapshot\r\n * Creating snapshots\r\n\r\nLimitations\r\n-----------\r\nVixen currently only supports running on Mac OS X or Linux.\r\n\r\nWindows support will require two libraries; one each from the 32-bit and 64-bit\r\nversions of the Windows VMware VIX SDK. These will need to be placed into \r\n`ext/windows/i386` and `ext/windows/x86_64` respectively, and `Vixen::Bridge`\r\nwill use [Facter](https://github.com/puppetlabs/facter) to determine which\r\noperating system and architecture version of the library to load.\r\n\r\nConnecting to a host\r\n--------------------\r\n\r\nIf using Vixen on the same machine as the virtual machine host, you can simply\r\nuse `Vixen.local_connect`\r\n\r\n```ruby\r\nrequire 'vixen'\r\n\r\nhost = Vixen.local_connect\r\n```\r\n\r\nIf using Vixen to connect to a remote host (VMware Server, ESXi, vSphere, etc),\r\nuse `Vixen.connect`\r\n\r\n```ruby\r\nrequire 'vixen'\r\n\r\nserver_type = Vixen::Constants::VixServiceProvider[:vmware_vi_server]\r\nhost = Vixen.connect server_type, <hostname>, <port>, <username>, <password>\r\n```\r\n\r\nBoth of these will return a `Vixen::Model::Host` object.\r\n\r\nVixen::Model::Host\r\n==================\r\n\r\n`Host` currently supports the following actions:\r\n\r\n * `open_vm`\r\n * `running_vms`\r\n * `paths_of_running_vms`\r\n\r\nCurrently running virtual machines\r\n----------------------------------\r\n\r\n```ruby\r\nrequire 'vixen'\r\n\r\nhost = Vixen.local_connect\r\nmachines = host.running_vms\r\n\r\nmachines.each do |vm|\r\n  puts \"Current Snapshot: #{vm.current_snapshot}\"\r\nend\r\n```\r\n\r\nOpening a virtual machine\r\n-------------------------\r\n\r\nOpening a virtual machine does not _start_ the virtual machine, but creates\r\nan object that you can use to interrogate properties of the virtual machine.\r\nThe virtual machine _could_ be started by using this object, (see \r\n`Vixen::Model::VM#power_on`).\r\n\r\nVixen can also be used on virtual machines that are not currently active:\r\n\r\n```ruby\r\nrequire 'vixen'\r\n\r\nhost = Vixen.local_connect\r\n\r\npath = '/Users/jeff/Documents/Virtual Machines/win2003sat.vmwarevm/Windows Server 2003 Enterprise x64 Edition.vmx'\r\n\r\nvm = host.open_vm path\r\n\r\nputs vm.current_snapshot\r\n```\r\n\r\nPaths of running virtual machines\r\n---------------------------------\r\n\r\nIf all you are interested is the path (of the `.vmx` file) of the running\r\nvirtual machines, you may use `paths_of_running_vms`, which is much lighter\r\nweight than `running_vms`.\r\n\r\n```ruby\r\nrequire 'vixen'\r\n\r\nhost = Vixen.local_connect\r\n\r\npaths = host.paths_of_running_vms\r\n\r\npaths.each do |path|\r\n  puts \"Currently running: #{path}\"\r\nend\r\n```\r\n\r\nVixen::Model::VM\r\n================\r\n\r\n`VM` currently supports the following actions:\r\n\r\n * `current_snapshot`\r\n * `create_snapshot`\r\n * `revert_to_snapshot`\r\n * `remove_snapshot`\r\n * Power Operations\r\n   * `power_on`\r\n   * `power_off`\r\n   * `suspend`\r\n   * `resume`\r\n   * `reset`\r\n * Querying current power state\r\n   * `powered_off?`\r\n   * `suspended?`\r\n   * `powered_on?`\r\n   * `current_power_states` - a VM may be concurrently have multiple power states\r\n\r\nVixen::Model::Snapshot\r\n======================\r\n\r\n`Snapshot` currently supports the following actions:\r\n\r\n * `display_name` - the short text title given to a snapshot\r\n * `description` - the lengthy text, if any, given to a snapshot\r\n * `parent` - the parent snapshot, if any\r\n * `full_name` - the full name of the snapshot (traverses parent hierarchy)\r\n\r\nProgress Callbacks\r\n==================\r\n\r\nThe VIX API allows for progress callbacks which Vixen exposes through the use\r\nof blocks passed to the method.\r\n\r\n```ruby\r\nrequire 'rubygems'\r\nrequire 'vixen'\r\n\r\n#Vixen.logger.level = Logger::DEBUG\r\nstart = Time.now\r\n\r\ndef elapsed_time(start)\r\n  \"[%s]\" % (Time.at(Time.now - start).utc.strftime '%T')\r\nend\r\n\r\nhost = Vixen.local_connect\r\n\r\nvm = host.open_vm '/Users/jeff/Desktop/centos-5.8-pe-2.5.3-vmware/centos-5.8-pe-2.5.3-vmware.vmx' do |*args|\r\n  print \"\\r#{elapsed_time(start)} waiting for my vm to open\"\r\n  $stdout.flush\r\nend\r\n\r\nvm.resume do |*args|\r\n  print \"\\r#{elapsed_time(start)} resuming...\"\r\n  $stdout.flush\r\nend\r\nputs\r\n\r\nprevious_snapshot = vm.current_snapshot\r\n\r\nputs \"#{elapsed_time(start)} previous_snapshot: #{previous_snapshot}\"\r\n\r\nsnapshot_name = \"vixen-created #{Time.now}\"\r\nnew_snapshot = vm.create_snapshot snapshot_name do |*args|\r\n  print \"\\r#{elapsed_time(start)} creating snapshot: #{snapshot_name}\"\r\n  $stdout.flush\r\nend\r\nputs\r\n\r\nvm.revert_to_snapshot previous_snapshot do |*args|\r\n  print \"\\r#{elapsed_time(start)} reverting to #{previous_snapshot}...\"\r\n  $stdout.flush\r\nend\r\nputs\r\n\r\nvm.suspend do |*args|\r\n  print \"\\r#{elapsed_time(start)} suspending...\"\r\n  $stdout.flush\r\nend\r\nputs\r\n```\r\n\r\nproduces output like\r\n\r\n```shell\r\n$ ruby vixen-example.rb          \r\n[00:00:00] waiting for my vm to open\r\n[00:00:02] resuming...\r\n[00:00:02] previous_snapshot: vixen-created\r\n[00:02:18] creating snapshot: vixen-created Tue Nov 20 02:18:04 -0800 2012\r\n[00:02:33] reverting to vixen-created...\r\n[00:02:36] reverting to vixen-created...\r\n[00:02:38] suspending...\r\n```\r\n\r\nSee Also\r\n========\r\n\r\n * [Official VMware VIX 1.12 documentation](http://www.vmware.com/support/developer/vix-api/vix112_reference/)\r\n"}